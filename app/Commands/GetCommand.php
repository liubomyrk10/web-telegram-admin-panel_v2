<?php

namespace App\Commands;

use App\Models\Bot;
use App\Models\Log;
use App\Models\Post;
use App\Models\Subscriber;
use App\Services\Post\PostService;
use App\Services\Post\PostTypeEnum;
use Illuminate\Support\Facades\Date;
use Telegram\Bot\Actions;
use Telegram\Bot\Commands\Command;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Telegram\Bot\FileUpload\InputFile;

class GetCommand extends Command
{
    protected string $name = 'get';
    protected string $pattern = '{type}';
    protected string $description = '–Ω–∞–¥—Å–∏–ª–∞—î —Ä–∞–Ω–¥–æ–º–Ω–∏–π –ø–æ—Å—Ç, –∞–±–æ –∑–∞ —Ç–∏–ø–æ–º /get <prompt> (image, gif, video, youtube, text) / sends a random post, or by type /get <prompt> (image, gif, video, youtube, text)';

    /**
     * @throws TelegramSDKException
     */
    public function handle(): void
    {
        // –ó–∞—Å—ñ–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        $start = Date::now();

        // –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–ø–∏—Ç
        $username = $this->telegram->getMe()->username;
        $bot = Bot::findByUsername($username);
        $type = $this->argument('type');
        $chatId = (string)$this->getUpdate()->getChat()->id;

        // —á–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —Ç–∏–ø –≤ –∫–æ–º–∞–Ω–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        $typeIsContain = collect(PostTypeEnum::getValues())->contains($type);
        if (!$typeIsContain) {
            // –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –ø–æ—Å—Ç
            $post = PostService::getRandomPostFromBot($bot);
            // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø, –∞–¥–∂–µ –π–æ–≥–æ –Ω–µ –∑–∞–¥–∞–ª–∏
            $type = $post->type;
        } else {
            // –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –ø–æ—Å—Ç –ø–æ —Ç–∏–ø—É
            $post = PostService::getRandomPostFromBotByType($bot, PostTypeEnum::from($type));
        }

        // —è–∫—â–æ –ø–æ—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏
        if (is_null($post)) {
            $this->replyWithMessage([
                'text' => '–ù–∞–∂–∞–ª—å, –Ω–∞–º –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Çüòû, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É - /help!'
            ]);
            return;
        }

        // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        $inviteLink = "\n<a href='https://t.me/$bot->username'>$bot->name</a>";
        $text = strlen($post->description) ?
            "$post->title\n$post->description\n$inviteLink" :
            "$post->title\n$inviteLink";
        if ($post->is_spoiler) {
            $text = "‚ÄºÔ∏è–û–ë–ï–†–ï–ñ–ù–û, –°–ü–û–ô–õ–ï–†‚ÄºÔ∏è\n<span class='tg-spoiler'>$text</span>";
        } elseif ($post->is_nsfw) {
            $text = "üîû–û–ë–ï–†–ï–ñ–ù–û, NSFWüîû\n<span class='tg-spoiler'>$text</span>";
        }
        $inputFile = InputFile::create($post->url, basename($post->url));

        // –í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –º–µ—Ç–æ–¥–∏ Telegram API
        switch ($type) {
            case PostTypeEnum::IMAGE->value:
                $this->sendImagePost($inputFile, $text);
                break;
            case PostTypeEnum::GIF->value:
                $this->sendGifPost($chatId, $inputFile, $text);
                break;
            case PostTypeEnum::VIDEO->value:
                $this->sendVideoPost($inputFile, $text, $post);
                break;
            case PostTypeEnum::YOUTUBE->value:
                $this->sendYoutubePost($text, $post);
                break;
            case PostTypeEnum::TEXT->value:
                $this->sendTextPost($text);
                break;
            default:
                $this->replyWithMessage([
                    'text' => '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ :(, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É - /help!'
                ]);
                break;
        }

        // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏
        $end = Date::now();
        $executionTime = $end->diffInMilliseconds($start);

        $log = new Log();
        $log->subscriber_id = Subscriber::where('telegram_id', $chatId)->first()->id;
        $log->chat_type = 'private';
        $log->command = $this->name;
        $log->message = $type;
        $log->send_time_taken = $executionTime;
        $log->save();
    }

    /**
     * @param InputFile $inputFile
     * @param string $text
     * @return void
     */
    public function sendImagePost(InputFile $inputFile, string $text): void
    {
        $this->replyWithChatAction([
            'action' => Actions::UPLOAD_PHOTO
        ]);

        $this->replyWithPhoto([
            'photo' => $inputFile,
            'caption' => $text,
            'parse_mode' => 'html',
        ]);
    }

    /**
     * @param mixed $chatId
     * @param InputFile $inputFile
     * @param string $text
     * @return void
     * @throws \Telegram\Bot\Exceptions\TelegramSDKException
     */
    public function sendGifPost(mixed $chatId, InputFile $inputFile, string $text): void
    {
        $this->replyWithChatAction([
            'action' => Actions::UPLOAD_DOCUMENT
        ]);

        $this->telegram->sendAnimation([
            'chat_id' => $chatId,
            'animation' => $inputFile,
            'caption' => $text,
            'parse_mode' => 'html',
        ]);
    }

    /**
     * @param InputFile $inputFile
     * @param string $text
     * @param \App\Models\Post $post
     * @return void
     */
    public function sendVideoPost(InputFile $inputFile, string $text, \App\Models\Post $post): void
    {
        $this->replyWithChatAction([
            'action' => Actions::UPLOAD_VIDEO
        ]);

        $this->replyWithVideo([
            'video' => $inputFile,
            'caption' => $text,
            'width' => $post->width,
            'height' => $post->height,
            'parse_mode' => 'html',
        ]);
    }

    /**
     * @param string $text
     * @param Post $post
     * @return void
     */
    public function sendYoutubePost(string $text, Post $post): void
    {
        $this->sendTextPost($text . "[¬≠]($post->url)");
    }

    /**
     * @param string $text
     * @return void
     */
    public function sendTextPost(string $text): void
    {
        $this->replyWithChatAction([
            'action' => Actions::TYPING
        ]);

        $this->replyWithMessage([
            'text' => $text,
            'parse_mode' => 'html',
        ]);
    }
}
